#!/usr/bin/env sh

title=Status
header="Global Status"
timeout=10
tmp="$(mktemp -d)"
checkfile="${1:-checks.csv}"
failonoutage=true
reportonoutage=true
useragent="User-Agent: Mozilla/5.0 (X11; Linux x86_64; Debian) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"

command_exists(){
    if ! command -v "${1}" >/dev/null 2>&1; then
        echo >&2 "Error: ${1} missing. Please install it"
        exit 1
    fi
}

get_element(){
    echo "${2}" | awk -v col="${1}" -F',' '{gsub(/^[ \t]+|[ \t]+$/, "", $col); print $col}'
}

check(){
    ctype="${1}"
    host="${2}"
    name="${3}"
    expectedcode="${4}"

    IPv="$(echo "${ctype}" | grep -o '[46]$')"
    case "${ctype}" in
        http*)
            statuscode="$(curl -${IPv}sSkLo /dev/null -H "${useragent}" -m "${timeout}" -w "%{http_code}" "${host}" 2> "${tmp}/ko/${name}.error")";;
        ping*)
            ping -${IPv}W "${timeout}" -c 1 "${host}" >/dev/null 2>&1
            statuscode=$?
            [ "${statuscode}" -ne "${expectedcode}" ] && echo 'Host unreachable' > "${tmp}/ko/${name}.error";;
        port*)
            error="$(nc -${IPv}w "${timeout}" -zv ${host} 2>&1)"
            statuscode=$?
            [ "${statuscode}" -ne "${expectedcode}" ] && echo "${error}" > "${tmp}/ko/${name}.error";;
    esac

    # verity status and write files
    if [ "${statuscode}" -eq "${expectedcode}" ]; then
        echo "Status code: ${statuscode}" > "${tmp}/ok/${name}.status"
    else
        echo "Status code: ${statuscode}" > "${tmp}/ko/${name}.status"
    fi
    if [ -s "${tmp}/ko/${name}.error" ]; then
        sed "${tmp}/ko/${name}.error" \
          -e 's,curl: ([0-9]*) ,,' \
          -e 's,.*) failed: ,,' > "${tmp}/ko/${name}.status"
    fi
}

command_exists 'curl'
command_exists 'nc'
command_exists 'ping'
mkdir -p "${tmp}/ok" "${tmp}/ko" || exit 1

while IFS="$(printf '\n')" read -r line; do
    ctype="$(get_element 1 "${line}")"
    code="$(get_element 2 "${line}")"
    name="$(get_element 3 "${line}")"
    host="$(get_element 4 "${line}")"
    check "${ctype}" "${host}" "${name}" "${code}" &
done < "${checkfile}"
wait

cat << EOF
<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<title>${title}</title>
<style>
    :root {
        color-scheme: dark light;
        --txt : #cfcfcf;
        --bg : #1D1F21;
        --red : #E01B24;
        --green : #3c9937;
    }

    @media (prefers-color-scheme: light) {
        :root {
            --txt : #444;
            --bg : white;
            --red : #DA2F40;
            --green : #358247;
        }
    }
    body { 
        font-family: 'Nimbus Mono PS', 'Courier New', monospace; 
        color: var(--text) ; 
        background: var(--bg) ; 
    }
    h1 { margin-top: 30px; }
    ul { padding: 0px; }
    li { list-style: none; margin-bottom: 2px; padding: 5px; border-bottom: 1px solid #ddd;  }
    .container { max-width: 600px; width: 100%; margin: 15px auto; }
    .panel { text-align: center; padding: 10px; border: 0px; border-radius: 5px; font-weight: bold}
    .failed-bg  { color: white; background-color: var(--red); }
    .success-bg { color: white; background-color: var(--green); }
    .failed  { color: var(--red); }
    .success { color: var(--green); }
    .status { float: right; }
    .small { font-size: 80%; }
    .small > b { opacity : .8 }
</style>
</head>
<body>
<div class='container'>
<h1>${header}</h1>
<p class=small><b> Last check: <time datetime='$(date -Iseconds)'>$(date +%F\ %T)</time></b></p>
EOF
outagenb="$(find "${tmp}/ko" -mindepth 1 | grep -c 'status$')"
if [ "${outagenb}" -ne 0 ]; then
    echo "<link rel='icon' type='image/svg+xml' href='/error.svg'>"
    echo "<ul><li class='panel failed-bg'>${outagenb} OUTAGE(s)</li></ul>"
else
    echo "<link rel='icon' type='image/svg+xml' href='/success.svg'>"
    echo "<ul><li class='panel success-bg'>ALL SYSTEMS OPERATIONAL</li></ul>"
fi
cat << EOF
<h1>Services</h1>
<ul>
EOF
for file in "${tmp}/ko/"*.status; do
    [ -e "${file}" ] || continue
    name="$(basename "${file}" | sed 's,.status$,,')"
    status="$(cat "${file}")"
    echo "<li>${name} <span class='small failed'>(${status})</span><span class='status failed'>Disrupted</span></li>"
    if [ "${reportonoutage}" = true ]; then
        echo "${name} (${status})" >&2
    fi
done
for file in "${tmp}/ok/"*.status; do
    [ -e "${file}" ] || continue
    name="$(basename "${file}" | sed 's,.status$,,')"
    echo "<li>${name} <span class='status success'>Operational</span></li>"
done
cat << EOF
</ul>
</div>
</body></html>
EOF

rm -r "${tmp}" 2>/dev/null
if [ "${failonoutage}" = true ]; then
    exit "${outagenb}"
fi
